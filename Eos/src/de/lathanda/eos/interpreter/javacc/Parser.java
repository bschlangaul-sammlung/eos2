/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package de.lathanda.eos.interpreter.javacc;
import de.lathanda.eos.interpreter.parsetree.*;
import de.lathanda.eos.interpreter.*;
import de.lathanda.eos.common.interpreter.*;
import de.lathanda.eos.base.*;
import de.lathanda.eos.common.*;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
@SuppressWarnings("unused")
public class Parser extends EosParser implements ParserConstants {
    private MarkerStack markerStack = new MarkerStack();
    private Program program;
    private String path;
    private int level;
    void open() {
        markerStack.push(new Marker());
        Token old = token;
        getNextToken();
        markerStack.peek().begin(token.beginColumn, token.beginLine);
        token = old;
    }
    void close(MarkedNode node) {
        markerStack.peek().end(token.endColumn, token.endLine);
        node.setMarker(markerStack.pop());
        program.addNode(node);
    }
    void setCode(MarkedNode node) {
        node.setMarker(new Marker(token.beginColumn, token.beginLine, token.endColumn, token.endLine));
        program.addNode(node);
    }
    void newlineInc() {
        Token old = token;
        program.prettyPrinterNewline(getNextToken().beginColumn, level);
        level++;
        token = old;
    }
    void newlineDec() {
        Token old = token;
        level--;
        program.prettyPrinterNewline(getNextToken().beginColumn, level);
        token = old;
    }
    void newlineDecInc() {
        Token old = token;
        level--;
        program.prettyPrinterNewline(getNextToken().beginColumn, level);
        level++;
        token = old;
    }
    void newline() {
        Token old = token;
        program.prettyPrinterNewline(getNextToken().beginColumn, level);
        token = old;
    }

/** Produktionen */
  final public void Parse(Program program, String path) throws ParseException {this.path = path;
  this.program = program;
  token_source.setProgram(program);
  Sequence sequence;
  SubRoutine sub;
  UserClass cls;
    sequence = Sequence();
program.add(sequence);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:
      case PROGRAM:
      case PROCEDURE:
      case METHOD:
      case CLASS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PROGRAM:{
        sequence = Program();
program.add(sequence);
        break;
        }
      case PROCEDURE:{
        sub = Procedure();
program.add(sub);
        break;
        }
      case METHOD:{
        sub = Method();
program.add(sub);
        break;
        }
      case CLASS:{
        cls = UserClass();
program.add(cls);
        break;
        }
      case IMPORT:{
        Import();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      sequence = Sequence();
program.add(sequence);
    }
    jj_consume_token(0);
  }

  final public Sequence Program() throws ParseException {Sequence sequence;
newlineInc();
    jj_consume_token(PROGRAM);
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_PROGRAM);
{if ("" != null) return sequence;}
    throw new Error("Missing return statement in function");
  }

  final public SubRoutine Procedure() throws ParseException {String name; Sequence sequence;Parameters parameters = null; Type ret =null;
open();
newlineInc();
    jj_consume_token(PROCEDURE);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      parameters = Parameters();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      ret = Type();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_PROCEDURE);
SubRoutine subroutine = new SubRoutine(name, parameters, sequence, ret, false);
    close(subroutine);
    {if ("" != null) return subroutine;}
    throw new Error("Missing return statement in function");
  }

  final public UserClass UserClass() throws ParseException {String name; String sup = null; UserClass cls; Method meth; Property prop;Sequence sequence;
open();
newlineInc();
    jj_consume_token(CLASS);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      sup = Name();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
cls = program.createUserClass(name); cls.setSuperClass(sup);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case METHOD:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
newline();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case METHOD:{
        meth = UserMethod(cls);
cls.addMethod(meth);
        break;
        }
      case IDENTIFIER:{
        prop = UserProperty(cls);
cls.addProperty(prop);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
newlineDec();
    jj_consume_token(END_CLASS);
close(cls);
    {if ("" != null) return cls;}
    throw new Error("Missing return statement in function");
  }

  final public Method UserMethod(UserClass ut) throws ParseException {String name; Sequence sequence;Parameters parameters = null; Type ret =null;
open();
newlineInc();
    jj_consume_token(METHOD);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      parameters = Parameters();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      ret = Type();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_METHOD);
Method method = new Method(name, parameters, sequence, ret, ut);
    close(method);
    {if ("" != null) return method;}
    throw new Error("Missing return statement in function");
  }

  final public Property UserProperty(UserClass ut) throws ParseException {String name;
  Type type;
  Property property = new Property(ut);
    name = Name();
property.addName(name);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(SEPARATOR);
      name = Name();
property.addName(name);
    }
    jj_consume_token(COLON);
    type = Type();
property.setType(type);
{if ("" != null) return property;}
    throw new Error("Missing return statement in function");
  }

  final public SubRoutine Method() throws ParseException {String name; Sequence sequence;Parameters parameters = null; Type ret =null;
open();
newlineInc();
    jj_consume_token(METHOD);
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      parameters = Parameters();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      ret = Type();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_METHOD);
SubRoutine subroutine = new SubRoutine(name, parameters, sequence, ret, true);
    close(subroutine);
    {if ("" != null) return subroutine;}
    throw new Error("Missing return statement in function");
  }

  final public Parameters Parameters() throws ParseException {Parameters parameters = new Parameters();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Parameter(parameters);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEPARATOR:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(SEPARATOR);
        Parameter(parameters);
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
  }

  final public void Parameter(Parameters parameters) throws ParseException {String name; Type type;
    name = Name();
parameters.addName(name);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(SEPARATOR);
      name = Name();
parameters.addName(name);
    }
    jj_consume_token(COLON);
    type = Type();
parameters.setType(type, new Marker(token.beginColumn, token.beginLine, token.endColumn, token.endLine));
  }

  final public void Import() throws ParseException {File file;
  Program subprogram;
newlineInc();
    jj_consume_token(IMPORT);
    file = File();
try {
        subprogram = new Program();
        Parser parser = new Parser(new StringCharStream(file));
        parser.Parse(subprogram, file.getParent());
        program.merge(subprogram, new Marker(token.beginColumn, token.beginLine, token.endColumn, token.endLine));
      } catch (IOException ioe) {
        {if (true) throw new ParseException(ioe.getLocalizedMessage());}
      }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(SEPARATOR);
newline();
      file = File();
try {
          subprogram = new Program();
          Parser parser = new Parser(new StringCharStream(file));
          parser.Parse(subprogram, file.getParent());
          program.merge(subprogram, new Marker(token.beginColumn, token.beginLine, token.endColumn, token.endLine));
        } catch (IOException ioe) {
          {if (true) throw new ParseException(ioe.getLocalizedMessage());}
        }
    }
newlineDec();
    jj_consume_token(END_IMPORT);
  }

  final public Sequence Sequence() throws ParseException {Sequence sequence = new Sequence();
  Node instruction;
  open();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REPEAT:
      case IF:
      case WITH:
      case SELF:
      case WHILE:
      case RESULT:
      case BREAKPOINT:
      case STOP:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
open();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REPEAT:
      case WHILE:{
        instruction = Loop();
        break;
        }
      case IF:{
        instruction = IfElse();
        break;
        }
      case WITH:{
        instruction = With();
        break;
        }
      case SELF:
      case RESULT:
      case BREAKPOINT:
      case STOP:
      case IDENTIFIER:{
        instruction = Statement();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
close(instruction);
    sequence.append(instruction);
    }
close(sequence);
    {if ("" != null) return sequence;}
    throw new Error("Missing return statement in function");
  }

  final public Node Loop() throws ParseException {Node loop;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REPEAT:{
newlineInc();
      jj_consume_token(REPEAT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOREVER:{
        loop = RepeatForever();
        break;
        }
      case UNTIL:{
        loop = RepeatUntil();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        if (jj_2_1(2147483647)) {
          //Langsamere korrekte Erkennung
              loop = RepeatPreWhile();
        } else if (jj_2_2(2147483647)) {
          loop = RepeatTimes();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case REPEAT:
          case END_REPEAT:
          case IF:
          case WITH:
          case SELF:
          case WHILE:
          case RESULT:
          case BREAKPOINT:
          case STOP:
          case IDENTIFIER:{
            loop = RepeatPostWhile();
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
      }
    case WHILE:{
      loop = WhileDo();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return loop;}
    throw new Error("Missing return statement in function");
  }

  final public IfElse IfElse() throws ParseException {Sequence a;
  Sequence b = null;
  Expression expression;
newlineInc();
    jj_consume_token(IF);
    expression = Expression();
    jj_consume_token(THEN);
    a = Sequence();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
newlineDecInc();
      jj_consume_token(ELSE);
      b = Sequence();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
newlineDec();
    jj_consume_token(END_IF);
{if ("" != null) return new IfElse(expression,a,b);}
    throw new Error("Missing return statement in function");
  }

  final public With With() throws ParseException {Expression with;
  Sequence sequence;
newlineInc();
    jj_consume_token(WITH);
    with = Expression();
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_WITH);
{if ("" != null) return new With(with, sequence);}
    throw new Error("Missing return statement in function");
  }

  final public RepeatForever RepeatForever() throws ParseException {Sequence sequence;
    jj_consume_token(FOREVER);
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_REPEAT);
{if ("" != null) return new RepeatForever(sequence);}
    throw new Error("Missing return statement in function");
  }

  final public RepeatTimes RepeatTimes() throws ParseException {Sequence sequence;
  Expression times = null;
    times = Expression();
setCode(times);
    jj_consume_token(TIMES);
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_REPEAT);
{if ("" != null) return new RepeatTimes(times, sequence);}
    throw new Error("Missing return statement in function");
  }

  final public WhileDo RepeatUntil() throws ParseException {Expression expression;
  Expression not;
  Sequence sequence;
    jj_consume_token(UNTIL);
    expression = Expression();
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_REPEAT);
not = expression.not();
    not.sameMarker(expression);
    {if ("" != null) return new WhileDo(not, sequence);}
    throw new Error("Missing return statement in function");
  }

  final public WhileDo RepeatPreWhile() throws ParseException {Expression expression;
  Sequence sequence;
    jj_consume_token(WHILE);
    expression = Expression();
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_REPEAT);
{if ("" != null) return new WhileDo(expression, sequence);}
    throw new Error("Missing return statement in function");
  }

  final public DoWhile RepeatPostWhile() throws ParseException {Expression expression;
  Sequence sequence;
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_REPEAT);
    jj_consume_token(WHILE);
    expression = Expression();
{if ("" != null) return new DoWhile(sequence, expression);}
    throw new Error("Missing return statement in function");
  }

  final public WhileDo WhileDo() throws ParseException {Expression expression;
  Sequence sequence;
newlineInc();
    jj_consume_token(WHILE);
    expression = Expression();
    jj_consume_token(DO);
    sequence = Sequence();
newlineDec();
    jj_consume_token(END_WHILE);
{if ("" != null) return new WhileDo(expression, sequence);}
    throw new Error("Missing return statement in function");
  }

  final public Node Statement() throws ParseException {Node statement;
newline();
    if (jj_2_3(2)) {
      statement = Declaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELF:
      case RESULT:
      case IDENTIFIER:{
        statement = Command(null);
        break;
        }
      case BREAKPOINT:{
        statement = Breakpoint();
        break;
        }
      case STOP:{
        statement = Stop();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public Node Breakpoint() throws ParseException {
    jj_consume_token(BREAKPOINT);
{if ("" != null) return new Breakpoint();}
    throw new Error("Missing return statement in function");
  }

  final public Node Stop() throws ParseException {
    jj_consume_token(STOP);
{if ("" != null) return new Stoppoint();}
    throw new Error("Missing return statement in function");
  }

  final public Declaration Declaration() throws ParseException {String name;
  Type type;
  Declaration declaration = new Declaration();
    name = Name();
declaration.addName(name);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(SEPARATOR);
      name = Name();
declaration.addName(name);
    }
    jj_consume_token(COLON);
    type = Type();
declaration.setType(type);
{if ("" != null) return declaration;}
    throw new Error("Missing return statement in function");
  }

  final public Node Command(Expression left) throws ParseException {Expression expression;
  Node command = null;
    if (jj_2_4(2)) {
      expression = Function(left);
{if ("" != null) return expression;}
    } else if (jj_2_5(2)) {
      command = Assignment(left);
{if ("" != null) return command;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELF:
      case RESULT:
      case IDENTIFIER:{
        expression = PropertyRead(left);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          command = Command(expression);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
        }
if (command != null) {
      {if ("" != null) return command;}
    } else {
      {if ("" != null) return expression;}
    }
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Assignment Assignment(Expression left) throws ParseException {PropertyWrite property;
  Expression expression;
    property = PropertyWrite(left);
    AssignmentOperator();
    expression = Expression();
{if ("" != null) return new Assignment(property, expression);}
    throw new Error("Missing return statement in function");
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      jj_consume_token(EQ);
      break;
      }
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Expression Expression() throws ParseException {Expression expression; Expression b; open();
    expression = AndExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      jj_consume_token(OR);
      b = AndExpression();
expression = expression.or(b);
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {Expression expression; Expression b; open();
    expression = EqualityExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
      b = EqualityExpression();
expression = expression.and(b);
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpression() throws ParseException {Expression expression; Expression b; open();
    expression = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:
    case NE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        b = RelationalExpression();
expression = expression.equals(b);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        b = RelationalExpression();
expression = expression.unequals(b);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {Expression expression; Expression b; open();
    expression = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:
    case LT:
    case LE:
    case GE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        b = AdditiveExpression();
expression = expression.less(b);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        b = AdditiveExpression();
expression = expression.greater(b);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        b = AdditiveExpression();
expression = expression.lessEquals(b);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        b = AdditiveExpression();
expression = expression.greaterEquals(b);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {Expression expression; Expression b; open();
    expression = MultiplicativeExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        b = MultiplicativeExpression();
expression = expression.plus(b);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        b = MultiplicativeExpression();
expression = expression.minus(b);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {Expression expression; Expression b; open();
    expression = UnaryExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        jj_consume_token(MULT);
        b = UnaryExpression();
expression = expression.multiply(b);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        b = UnaryExpression();
expression = expression.divide(b);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression() throws ParseException {Expression expression; open();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
      expression = Pow();
expression = expression.negate();
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      expression = Pow();
expression = expression.not();
      break;
      }
    case SELF:
    case TRUE:
    case FALSE:
    case RESULT:
    case LPAREN:
    case YELLOW:
    case RED:
    case GREEN:
    case BLUE:
    case WHITE:
    case BLACK:
    case BROWN:
    case LIGHT_BLUE:
    case LIGHT_GREEN:
    case GRAY:
    case LIGHT_GRAY:
    case DASHED:
    case SOLID:
    case DOTTED:
    case DASHED_DOTTED:
    case INVISIBLE:
    case FILLED:
    case SHADED:
    case DARK_SHADED:
    case TRANSPARENT:
    case CENTER:
    case LEFT:
    case RIGHT:
    case TOP:
    case BOTTOM:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case COLOR_LITERAL_RGB:
    case COLOR_LITERAL_RGBA:
    case IDENTIFIER:{
      expression = Pow();
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Pow() throws ParseException {Expression expression; Expression b; open();
    expression = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POW:{
      jj_consume_token(POW);
      b = Pow();
expression = expression.pow(b);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {Expression expression; open();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case YELLOW:
    case RED:
    case GREEN:
    case BLUE:
    case WHITE:
    case BLACK:
    case BROWN:
    case LIGHT_BLUE:
    case LIGHT_GREEN:
    case GRAY:
    case LIGHT_GRAY:
    case DASHED:
    case SOLID:
    case DOTTED:
    case DASHED_DOTTED:
    case INVISIBLE:
    case FILLED:
    case SHADED:
    case DARK_SHADED:
    case TRANSPARENT:
    case CENTER:
    case LEFT:
    case RIGHT:
    case TOP:
    case BOTTOM:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case COLOR_LITERAL_RGB:
    case COLOR_LITERAL_RGBA:{
      expression = Literal();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      if (jj_2_6(2)) {
        expression = Function(null);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SELF:
        case RESULT:
        case IDENTIFIER:{
          expression = PropertyRead(null);
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          expression = Expression();
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      expression = PostPrimaryExpression(expression);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
close(expression);
    {if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PostPrimaryExpression(Expression left) throws ParseException {Expression expression = left;
    label_13:
    while (true) {
      jj_consume_token(DOT);
      if (jj_2_7(2)) {
        expression = Function(expression);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SELF:
        case RESULT:
        case IDENTIFIER:{
          expression = PropertyRead(expression);
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_13;
      }
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyRead PropertyRead(Expression left) throws ParseException {String name;
  open();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      name = Name();
      break;
      }
    case RESULT:{
      jj_consume_token(RESULT);
name = ReservedVariables.RESULT;
      break;
      }
    case SELF:{
      jj_consume_token(SELF);
name = ReservedVariables.SELF;
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
PropertyRead propertyRead = new PropertyRead(left, name);
    close(propertyRead);
    {if ("" != null) return propertyRead;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyWrite PropertyWrite(Expression left) throws ParseException {String name;
  open();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      name = Name();
      break;
      }
    case RESULT:{
      jj_consume_token(RESULT);
name = ReservedVariables.RESULT;
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
PropertyWrite propertyWrite = new PropertyWrite(left, name);
    close(propertyWrite);
    {if ("" != null) return propertyWrite;}
    throw new Error("Missing return statement in function");
  }

  final public Invoke Function(Expression left) throws ParseException {Arguments args;
  String name;
  open();
    name = Name();
    args = Arguments();
Invoke invoke = new Invoke(left, name, args);
    close(invoke);
    {if ("" != null) return invoke;}
    throw new Error("Missing return statement in function");
  }

  final public Arguments Arguments() throws ParseException {Arguments args = new Arguments();
  Expression arg;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELF:
    case TRUE:
    case FALSE:
    case RESULT:
    case LPAREN:
    case NOT:
    case MINUS:
    case YELLOW:
    case RED:
    case GREEN:
    case BLUE:
    case WHITE:
    case BLACK:
    case BROWN:
    case LIGHT_BLUE:
    case LIGHT_GREEN:
    case GRAY:
    case LIGHT_GRAY:
    case DASHED:
    case SOLID:
    case DOTTED:
    case DASHED_DOTTED:
    case INVISIBLE:
    case FILLED:
    case SHADED:
    case DARK_SHADED:
    case TRANSPARENT:
    case CENTER:
    case LEFT:
    case RIGHT:
    case TOP:
    case BOTTOM:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case COLOR_LITERAL_RGB:
    case COLOR_LITERAL_RGBA:
    case IDENTIFIER:{
      arg = Expression();
args.append(arg);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEPARATOR:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_14;
        }
        jj_consume_token(SEPARATOR);
        arg = Expression();
args.append(arg);
      }
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
  }

  final public Constant Literal() throws ParseException {Constant literal;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      literal = IntNumber();
      break;
      }
    case FLOATING_POINT_LITERAL:{
      literal = DoubleNumber();
      break;
      }
    case STRING_LITERAL1:
    case STRING_LITERAL2:{
      literal = Text();
      break;
      }
    case TRUE:
    case FALSE:{
      literal = BooleanLiteral();
      break;
      }
    case YELLOW:
    case RED:
    case GREEN:
    case BLUE:
    case WHITE:
    case BLACK:
    case BROWN:
    case LIGHT_BLUE:
    case LIGHT_GREEN:
    case GRAY:
    case LIGHT_GRAY:{
      literal = Color();
      break;
      }
    case DASHED:
    case SOLID:
    case DOTTED:
    case DASHED_DOTTED:
    case INVISIBLE:{
      literal = LineStyle();
      break;
      }
    case FILLED:
    case SHADED:
    case DARK_SHADED:
    case TRANSPARENT:{
      literal = FillStyle();
      break;
      }
    case CENTER:
    case LEFT:
    case RIGHT:
    case TOP:
    case BOTTOM:{
      literal = Alignment();
      break;
      }
    case COLOR_LITERAL_RGB:
    case COLOR_LITERAL_RGBA:{
      literal = ColorLiteral();
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
setCode(literal);
    {if ("" != null) return literal;}
    throw new Error("Missing return statement in function");
  }

  final public Constant BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new Constant(Boolean.TRUE,  Type.getBoolean(), "wahr");}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new Constant(Boolean.FALSE, Type.getBoolean(), "falsch");}
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Constant Color() throws ParseException {Color c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case YELLOW:{
      jj_consume_token(YELLOW);
c = Color.YELLOW;
      break;
      }
    case RED:{
      jj_consume_token(RED);
c = Color.RED;
      break;
      }
    case GREEN:{
      jj_consume_token(GREEN);
c = Color.GREEN;
      break;
      }
    case BLUE:{
      jj_consume_token(BLUE);
c = Color.BLUE;
      break;
      }
    case WHITE:{
      jj_consume_token(WHITE);
c = Color.WHITE;
      break;
      }
    case BLACK:{
      jj_consume_token(BLACK);
c = Color.BLACK;
      break;
      }
    case BROWN:{
      jj_consume_token(BROWN);
c = new Color(118,80,8);
      break;
      }
    case LIGHT_BLUE:{
      jj_consume_token(LIGHT_BLUE);
c = new Color(123,177,244);
      break;
      }
    case LIGHT_GREEN:{
      jj_consume_token(LIGHT_GREEN);
c = new Color(87,225,4);
      break;
      }
    case GRAY:{
      jj_consume_token(GRAY);
c = Color.GRAY;
      break;
      }
    case LIGHT_GRAY:{
      jj_consume_token(LIGHT_GRAY);
c = Color.LIGHT_GRAY;
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Constant(c, Type.getColor(), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public Constant ColorLiteral() throws ParseException {Token color; Color c; String hex; int r; int g; int b; int a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLOR_LITERAL_RGB:{
      color = jj_consume_token(COLOR_LITERAL_RGB);
hex = color.image;
    r = Integer.parseInt(hex.substring(1,3),16);
    g = Integer.parseInt(hex.substring(3,5),16);
    b = Integer.parseInt(hex.substring(5,7),16);
    c = new Color(r, g, b);
      break;
      }
    case COLOR_LITERAL_RGBA:{
      color = jj_consume_token(COLOR_LITERAL_RGBA);
hex = color.image;
    r = Integer.parseInt(hex.substring(1,3),16);
    g = Integer.parseInt(hex.substring(3,5),16);
    b = Integer.parseInt(hex.substring(5,7),16);
    a = Integer.parseInt(hex.substring(7,9),16);
    c = new Color(r, g, b, a);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Constant(c, Type.getColor(), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public Constant LineStyle() throws ParseException {LineStyle line;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DASHED:{
      jj_consume_token(DASHED);
line = LineStyle.DASHED;
      break;
      }
    case SOLID:{
      jj_consume_token(SOLID);
line = LineStyle.SOLID;
      break;
      }
    case DOTTED:{
      jj_consume_token(DOTTED);
line = LineStyle.DOTTED;
      break;
      }
    case DASHED_DOTTED:{
      jj_consume_token(DASHED_DOTTED);
line = LineStyle.DASHED_DOTTED;
      break;
      }
    case INVISIBLE:{
      jj_consume_token(INVISIBLE);
line = LineStyle.INVISIBLE;
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Constant(line, Type.getLineStyle(), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public Constant FillStyle() throws ParseException {FillStyle fill;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FILLED:{
      jj_consume_token(FILLED);
fill = FillStyle.FILLED;
      break;
      }
    case SHADED:{
      jj_consume_token(SHADED);
fill = FillStyle.RULED;
      break;
      }
    case DARK_SHADED:{
      jj_consume_token(DARK_SHADED);
fill = FillStyle.CHECKED;
      break;
      }
    case TRANSPARENT:{
      jj_consume_token(TRANSPARENT);
fill = FillStyle.TRANSPARENT;
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Constant(fill, Type.getFillStyle(), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public Constant Alignment() throws ParseException {Alignment align;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CENTER:{
      jj_consume_token(CENTER);
align = Alignment.CENTER;
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
align = Alignment.LEFT;
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
align = Alignment.RIGHT;
      break;
      }
    case TOP:{
      jj_consume_token(TOP);
align = Alignment.TOP;
      break;
      }
    case BOTTOM:{
      jj_consume_token(BOTTOM);
align = Alignment.BOTTOM;
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Constant(align, Type.getAlignment(), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public String Name() throws ParseException {Token name;
    name = jj_consume_token(IDENTIFIER);
{if ("" != null) return name.image;}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {Token type;
    type = jj_consume_token(IDENTIFIER);
{if ("" != null) return program.getType(type.image);}
    throw new Error("Missing return statement in function");
  }

  final public File File() throws ParseException {String filename;
    filename = TextRaw();
File file = new File(filename);
     if (!file.exists()) {
       file = new File(path + File.separator + filename);
     }
     {if ("" != null) return file;}
    throw new Error("Missing return statement in function");
  }

  final public Constant Text() throws ParseException {String text;
    text = TextRaw();
{if ("" != null) return new Constant(text, Type.getString(), token.image);}
    throw new Error("Missing return statement in function");
  }

  final public String TextRaw() throws ParseException {Token t; String text;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING_LITERAL1:{
      t = jj_consume_token(STRING_LITERAL1);
      break;
      }
    case STRING_LITERAL2:{
      t = jj_consume_token(STRING_LITERAL2);
      break;
      }
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
text = t.image;
    text = text.replace("\u005c\u005cn", "\u005cn")
      .replace("\u005c\u005ct", "\u005ct")
      .replace("\u005c\u005cn", "\u005cn")
      .replace("\u005c\u005cr", "\u005cr")
      .replace("\u005c\u005c\u005c'", "\u005c'")
      .replace("\u005c\u005c\u005c\u005c", "\u005c\u005c");
    {if ("" != null) return text.substring(1, text.length() - 1);}
    throw new Error("Missing return statement in function");
  }

  final public Constant IntNumber() throws ParseException {Token number;
    number = jj_consume_token(INTEGER_LITERAL);
try {
        {if ("" != null) return new Constant(new Integer(number.image), Type.getInteger(), number.image);}
      } catch (NumberFormatException nfe) {
                        {if (true) throw new NumberFormatException(number.image);}
      }
    throw new Error("Missing return statement in function");
  }

  final public Constant DoubleNumber() throws ParseException {Token number;
    number = jj_consume_token(FLOATING_POINT_LITERAL);
{if ("" != null) return new Constant(new Double(number.image), Type.getDouble(), number.image);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(SELF)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(SEPARATOR)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(RESULT)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(RESULT)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(POW)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    Token xsp;
    if (jj_3R_74()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(BOTTOM)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(TOP)) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(LEFT)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(CENTER)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(TRANSPARENT)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(DARK_SHADED)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(SHADED)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(FILLED)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(INVISIBLE)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(DASHED_DOTTED)) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(DOTTED)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(SOLID)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(DASHED)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(COLOR_LITERAL_RGBA)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(COLOR_LITERAL_RGB)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(LIGHT_GRAY)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(GRAY)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(LIGHT_GREEN)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(LIGHT_BLUE)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(BROWN)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(BLACK)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(WHITE)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(BLUE)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(GREEN)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(RED)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(YELLOW)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000aa,0x1000aa,0x0,0x0,0x200000,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe1844200,0xe1844200,0x1800,0xe1846200,0x1000200,0x10000,0xe0800000,0x0,0x0,0x20800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38800000,0x0,0x18000000,0x20800000,0x0,0x20800000,0x0,0x20800000,0x20000000,0x0,0x38800000,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x8,0x0,0x0,0x0,0x1,0x8,0x10,0x1,0x8,0x10,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x20,0x0,0x240,0x2000,0x4000,0x1200,0x1200,0xd80,0xd80,0x30000,0x30000,0xc0000,0xc0000,0xffe28001,0x100000,0xffe00000,0x1,0x20,0x0,0x20,0x0,0x0,0x10,0xffe28001,0xffe00000,0x0,0xffe00000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfa803fff,0x0,0x7a803fff,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0xfa803fff,0x7a803fff,0x0,0x0,0x60000000,0x1f,0x1e0,0x3e00,0x18000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public Parser(CharStream stream) {
    token_source = new ParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[98];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 98; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
