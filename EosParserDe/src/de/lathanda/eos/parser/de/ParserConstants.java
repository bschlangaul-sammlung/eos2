/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package de.lathanda.eos.parser.de;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IMPORT = 1;
  /** RegularExpression Id. */
  int END_IMPORT = 2;
  /** RegularExpression Id. */
  int PROGRAM = 3;
  /** RegularExpression Id. */
  int END_PROGRAM = 4;
  /** RegularExpression Id. */
  int PROCEDURE = 5;
  /** RegularExpression Id. */
  int END_PROCEDURE = 6;
  /** RegularExpression Id. */
  int METHOD = 7;
  /** RegularExpression Id. */
  int END_METHOD = 8;
  /** RegularExpression Id. */
  int REPEAT = 9;
  /** RegularExpression Id. */
  int TIMES = 10;
  /** RegularExpression Id. */
  int FOREVER = 11;
  /** RegularExpression Id. */
  int UNTIL = 12;
  /** RegularExpression Id. */
  int END_REPEAT = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int THEN = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int END_IF = 17;
  /** RegularExpression Id. */
  int WITH = 18;
  /** RegularExpression Id. */
  int END_WITH = 19;
  /** RegularExpression Id. */
  int CLASS = 20;
  /** RegularExpression Id. */
  int EXTENDS = 21;
  /** RegularExpression Id. */
  int END_CLASS = 22;
  /** RegularExpression Id. */
  int SELF = 23;
  /** RegularExpression Id. */
  int WHILE = 24;
  /** RegularExpression Id. */
  int DO = 25;
  /** RegularExpression Id. */
  int END_WHILE = 26;
  /** RegularExpression Id. */
  int TRUE = 27;
  /** RegularExpression Id. */
  int FALSE = 28;
  /** RegularExpression Id. */
  int RESULT = 29;
  /** RegularExpression Id. */
  int BREAKPOINT = 30;
  /** RegularExpression Id. */
  int STOP = 31;
  /** RegularExpression Id. */
  int LPAREN = 32;
  /** RegularExpression Id. */
  int RPAREN = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int COLON = 35;
  /** RegularExpression Id. */
  int SEPARATOR = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int ASSIGN = 38;
  /** RegularExpression Id. */
  int GT = 39;
  /** RegularExpression Id. */
  int LT = 40;
  /** RegularExpression Id. */
  int EQ = 41;
  /** RegularExpression Id. */
  int LE = 42;
  /** RegularExpression Id. */
  int GE = 43;
  /** RegularExpression Id. */
  int NE = 44;
  /** RegularExpression Id. */
  int OR = 45;
  /** RegularExpression Id. */
  int AND = 46;
  /** RegularExpression Id. */
  int NOT = 47;
  /** RegularExpression Id. */
  int PLUS = 48;
  /** RegularExpression Id. */
  int MINUS = 49;
  /** RegularExpression Id. */
  int MULT = 50;
  /** RegularExpression Id. */
  int DIV = 51;
  /** RegularExpression Id. */
  int POW = 52;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 59;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 60;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT2 = 61;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 62;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 63;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 64;
  /** RegularExpression Id. */
  int EXPONENT = 65;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 66;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 67;
  /** RegularExpression Id. */
  int COLOR_LITERAL_RGB = 68;
  /** RegularExpression Id. */
  int COLOR_LITERAL_RGBA = 69;
  /** RegularExpression Id. */
  int IDENTIFIER = 70;
  /** RegularExpression Id. */
  int LETTER = 71;
  /** RegularExpression Id. */
  int DIGIT = 72;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"einf\\u00fcgen\"",
    "\"*einf\\u00fcgen\"",
    "\"programm\"",
    "\"*programm\"",
    "\"anweisung\"",
    "\"*anweisung\"",
    "\"methode\"",
    "\"*methode\"",
    "\"wiederhole\"",
    "\"mal\"",
    "\"immer\"",
    "\"bis\"",
    "\"*wiederhole\"",
    "\"wenn\"",
    "\"dann\"",
    "\"sonst\"",
    "\"*wenn\"",
    "\"f\\u00fcr\"",
    "\"*f\\u00fcr\"",
    "\"klasse\"",
    "\"erweitert\"",
    "\"*klasse\"",
    "\"selbst\"",
    "\"solange\"",
    "\"tue\"",
    "\"*solange\"",
    "\"wahr\"",
    "\"falsch\"",
    "\"ergebnis\"",
    "\"haltepunkt\"",
    "\"beenden\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\":=\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"oder\"",
    "\"und\"",
    "\"nicht\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\u00a0\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT2>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<COLOR_LITERAL_RGB>",
    "<COLOR_LITERAL_RGBA>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
