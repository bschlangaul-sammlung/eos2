/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package de.lathanda.eos.interpreter.parser.en;
import de.lathanda.eos.vm.*;
import de.lathanda.eos.base.*;
import de.lathanda.eos.base.MutableColor;
import de.lathanda.eos.baseparser.Program;
import de.lathanda.eos.parser.base.*;

import java.io.File;
import java.io.IOException;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserTokenManager implements ParserConstants {
  Program program;
  void CommonTokenAction(Token t) {
    Token comment = t.specialToken;
    if (comment != null) {
      while (comment.specialToken != null) {
        comment = comment.specialToken;
      }
      while (comment != null) {
        program.addToken(SourceTokenFactory.create(comment));
        comment = comment.next;
      }
    }
    program.addToken(SourceTokenFactory.create(t));
  }
  public void setProgram(Program program) {
    this.program = program;
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != 0L)
            return 35;
         if ((active0 & 0xffe0e000fbb5deaaL) != 0L || (active1 & 0x3fffL) != 0L)
         {
            jjmatchedKind = 95;
            return 22;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x200002004000L) != 0L || (active1 & 0x4L) != 0L)
            return 22;
         if ((active0 & 0xffe0c000f9b59eaaL) != 0L || (active1 & 0x3ffbL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 22;
         }
         return -1;
      case 2:
         if ((active0 & 0x40c00000000000L) != 0L)
            return 22;
         if ((active0 & 0xffa00000f9b59eaaL) != 0L || (active1 & 0x3fffL) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 2;
            return 22;
         }
         return -1;
      case 3:
         if ((active0 & 0x4100000088858000L) != 0L)
            return 22;
         if ((active0 & 0xbea0000071301eaaL) != 0L || (active1 & 0x3fffL) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 3;
            return 22;
         }
         return -1;
      case 4:
         if ((active0 & 0xe80000011101400L) != 0L || (active1 & 0x42L) != 0L)
            return 22;
         if ((active0 & 0xb020000060200aaaL) != 0L || (active1 & 0x3fbdL) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
            return 22;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000020000282L) != 0L || (active1 & 0x2dL) != 0L)
            return 22;
         if ((active0 & 0xb000000040200828L) != 0L || (active1 & 0x3f90L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 5;
            }
            return 22;
         }
         return -1;
      case 6:
         if ((active0 & 0x200808L) != 0L || (active1 & 0x80L) != 0L)
            return 22;
         if ((active0 & 0xb000000040000020L) != 0L || (active1 & 0x3f18L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
            return 22;
         }
         return -1;
      case 7:
         if ((active1 & 0x200L) != 0L)
            return 22;
         if ((active0 & 0xb000000040000020L) != 0L || (active1 & 0x3d18L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
            return 22;
         }
         return -1;
      case 8:
         if ((active0 & 0x9000000000000020L) != 0L || (active1 & 0x10L) != 0L)
            return 22;
         if ((active0 & 0x2000000040000000L) != 0L || (active1 & 0x3d08L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
            return 22;
         }
         return -1;
      case 9:
         if ((active0 & 0x2000000040000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 22;
         if ((active1 & 0x2d08L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
            return 22;
         }
         return -1;
      case 10:
         if ((active1 & 0x500L) != 0L)
            return 22;
         if ((active1 & 0x2808L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 10;
            return 22;
         }
         return -1;
      case 11:
         if ((active1 & 0x808L) != 0L)
            return 22;
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 11;
            return 22;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 32);
      case 41:
         return jjStopAtPos(0, 33);
      case 42:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x44a2154L, 0x0L);
      case 43:
         return jjStopAtPos(0, 48);
      case 44:
         return jjStopAtPos(0, 36);
      case 45:
         return jjStopAtPos(0, 49);
      case 46:
         return jjStartNfaWithStates_0(0, 37, 7);
      case 47:
         return jjStartNfaWithStates_0(0, 51, 35);
      case 58:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 34);
      case 60:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x140000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 41);
      case 62:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 94:
         return jjStopAtPos(0, 52);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xd00000040000000L, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x280L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0xdL);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x210000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000800L, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4080000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4002L, 0x10L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xb000000000000000L, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x28L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000020000200L, 0x840L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80800000L, 0x2L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8008400L, 0x1100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000001040000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 160:
         return jjStopAtPos(0, 83);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x9L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000020800280L, active1, 0x600L);
      case 70:
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 22);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000001008000L, active1, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xb000000000060404L, active1, 0x820L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x500000000110000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000001002L, active1, 0x10L);
      case 79:
      case 111:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000800L, active1, 0x3006L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x50L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 22);
         return jjMoveStringLiteralDfa2_0(active0, 0x4880000048002028L, active1, 0x100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000100000L, active1, 0x100L);
      case 68:
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 22);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 22);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x408000004000a100L, active1, 0x80L);
      case 70:
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(2, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0xb000000000000000L, active1, 0x800L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000001080000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000010c00000L, active1, 0x62L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000080000028L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x850L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20010002L, active1, 0x9L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 22);
         return jjMoveStringLiteralDfa3_0(active0, 0x241080L, active1, 0x2004L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000008000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40400000L, active1, 0x1000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000020L, active1, 0x80L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 22);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 22);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000200e02L, active1, 0x40L);
      case 70:
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 22);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0xb000000000000080L, active1, 0x809L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4001000L, active1, 0x12L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000001000000L, active1, 0x20L);
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x50L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 22);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10100004L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000080100L, active1, 0x2604L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 22);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 22);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 22);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 22);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x2024L, active1, 0x22dL);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x80L);
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x24000000L, active1, 0x1000L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 22);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000080L, active1, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xaL, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 22);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 22);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x110L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0xb000000000000000L, active1, 0x800L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2008L, active1, 0x800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 22);
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 22);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 22);
         return jjMoveStringLiteralDfa6_0(active0, 0x200020L, active1, 0x8L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x840L, active1, 0x80L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1010L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x100L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x14L, active1, 0x200L);
      case 83:
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(5, 22);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 1, 22);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 22);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 22);
         break;
      case 87:
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L, active1, 0x2100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 68:
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 22);
         return jjMoveStringLiteralDfa7_0(active0, 0x40L, active1, 0x8L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x800L);
      case 77:
      case 109:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 22);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 22);
         return jjMoveStringLiteralDfa7_0(active0, 0xa000000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 22);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(6, 2);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 22);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0xa000000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2010L);
      case 77:
      case 109:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(7, 4);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L, active1, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000040L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 5, 22);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 22);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 22);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x1100L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 22);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(9, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x900L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 22);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 74, 22);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x808L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x2000L);
      case 84:
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(10, 72, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(11, 67, 22);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 75, 22);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 77, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(41, 42); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 35)
                     { jjAddStates(7, 8); }
                  else if (curChar == 47)
                     { jjAddStates(9, 10); }
                  else if (curChar == 36)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(22); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(11, 13); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(14, 16); }
                  else if (curChar == 46)
                     { jjCheckNAdd(7); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  break;
               case 1:
                  { jjAddStates(17, 18); }
                  break;
               case 3:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if (curChar == 48 && kind > 87)
                     kind = 87;
                  break;
               case 6:
                  if (curChar == 46)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
               case 14:
                  if (curChar == 34)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 12:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 15:
                  if (curChar == 34 && kind > 91)
                     kind = 91;
                  break;
               case 16:
               case 19:
                  if (curChar == 39)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 20:
                  if (curChar == 39 && kind > 92)
                     kind = 92;
                  break;
               case 21:
                  if (curChar != 36)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if (curChar != 46)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 28:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAdd(29); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if (curChar == 47)
                     { jjAddStates(9, 10); }
                  break;
               case 36:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 37:
                  if ((0x2400L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 38:
                  if (curChar == 10 && kind > 84)
                     kind = 84;
                  break;
               case 39:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 41:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 42:
                  if (curChar == 42)
                     { jjCheckNAddStates(19, 21); }
                  break;
               case 43:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(44, 42); }
                  break;
               case 44:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(44, 42); }
                  break;
               case 45:
                  if (curChar == 47 && kind > 85)
                     kind = 85;
                  break;
               case 46:
                  if (curChar == 35)
                     { jjAddStates(7, 8); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     { jjCheckNAdd(22); }
                  }
                  else if (curChar == 123)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 125 && kind > 86)
                     kind = 86;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(22, 23); }
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x14400010144000L & l) != 0L)
                     { jjCheckNAddStates(14, 16); }
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x14400010144000L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 21:
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(22); }
                  break;
               case 27:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(24, 25); }
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 36:
                  { jjAddStates(0, 2); }
                  break;
               case 41:
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 43:
               case 44:
                  { jjCheckNAddTwoStates(44, 42); }
                  break;
               case 47:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 53:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(22); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(17, 18); }
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(14, 16); }
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(11, 13); }
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 43:
               case 44:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(44, 42); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   36, 37, 39, 24, 25, 30, 31, 47, 53, 35, 40, 17, 18, 20, 12, 13, 
   15, 1, 2, 42, 43, 45, 9, 10, 28, 29, 32, 33, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", "\73", "\72", "\54", "\56", "\72\75", 
"\76", "\74", "\75", "\74\75", "\76\75", "\74\76", null, null, null, "\53", "\55", 
"\52", "\57", "\136", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(CharStream stream){


    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (CharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(CharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(CharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xfa803fffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x7fc000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x700000L, 
};
    protected CharStream  input_stream;

    private final int[] jjrounds = new int[61];
    private final int[] jjstateSet = new int[2 * 61];

    
    protected char curChar;
}
